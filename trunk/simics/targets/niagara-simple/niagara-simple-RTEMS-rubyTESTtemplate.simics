#Assembled from the "niagara-simple" machine configuration files
#distributed
# with Simics. Boots from an ISO9660 image.

if not defined num_cpus {$num_cpus  = 1}
if not defined freq_mhz {$freq_mhz  = 5}
if not defined rtc_time {$rtc_time  = "2006-04-04 12:00:00 UTC"}

###

add-directory "%simics%/targets/niagara-simple/images/"

import-std-components
import-niagara-simple-components

if $num_cpus == 1 {
   $num_cores = 1
   $num_strands = 1
} else if $num_cpus == 2 {
   $num_cores = 2
   $num_strands = 1
} else if $num_cpus == 32 {
   $num_cores = 8
   $num_strands = 4
} else {
   echo "Unsupported number of processors. (Use 1, 2, or 32)"
}
$system = (create-niagara-simple-system cpu_frequency = $freq_mhz
                                       num_cores = $num_cores
                                       strands_per_core = $num_strands
                                       rtc_time = $rtc_time)
$console = (create-std-text-console)
$system.connect com1 $console
$machine_defined = 1

instantiate-components

####

$system.set-prom-defaults
$system.set-prom-env auto-boot? true

# Simics "niagara-simple" machine does not support CD-ROM device, fortunatelly
# it is able to boot from a disk image in ISO9660 format.
$image = ($system.get-component-object disk_image)
@image = sim.objects[simenv.image]
@image.files = [['REPLACEDBYSED534ISOPATH', 'ro', 0, REPLACEDBYSED534ISOSIZE  ]]


new-symtable name = gicasymtable
gicasymtable.load-symbols file = REPLACEDBYSED534SYMBOLS/REPLACEDBYSED534TESTGROUP/REPLACEDBYSED534TESTNAME.exe
gicasymtable.source-path path =  REPLACEDBYSED534SOURCEPATH
new-context name = gicacontext
gicacontext.symtable symtable = gicasymtable 
cpu0_0.set-context context = gicacontext


#  trace module - intantiate and use
#load-module trace
#new-tracer 
#@conf.trace0.trace_exceptions = 0
#@conf.trace0.trace_data = 0
#@conf.trace0.trace_instructions = 0
#@conf.trace0.displayLinenumbers = 1
#@conf.trace0.set_ftracesymbol_file = "/home/eugen/work/rtemssparc64/rtems/boot/debug/rtems/REPLACEDBYSED534TESTGROUP/REPLACEDBYSED534TESTNAME.fun.nm"
#@conf.trace0.set_ftrace_file = "/home/eugen/work/rtemssparc64/rtems/boot/debug/rtems/REPLACEDBYSED534TESTGROUP/REPLACEDBYSED534TESTNAME.trace.c"

#@conf.trace0.threadSkip = "0 UI1 IDLE"
#@conf.trace0.threadSkip = "0 IDLE"
#trace0.start traceaddress (sym boot_card)
##trace0.start traceaddress 100
#trace0.start
##@conf.trace0.trace_print_stack = 1
##@conf.trace0.trace_print_threads = 1
##@conf.trace0.trace_print_containerstatistics = 1


## GEMS Ruby Configuration
#instruction-fetch-mode instruction-fetch-trace
#istc-disable
#dstc-disable
#cpu-switch-time 1

#load-module ruby
#ruby0.setparam g_NUM_PROCESSORS 1
#ruby0.setparam g_MEMORY_SIZE_BYTES 4294967296
#ruby0.init


script-branch {
        local $con = ($console.get-component-object con)
        $con.wait-for-string "boot: "
        $con.input "REPLACEDBYSED534TESTNAME\n"
        }

script-branch {
	local $con = ($console.get-component-object con)
	$con.wait-for-string "START_TOKEN"
	$con.capture-start REPLACEDBYSED534TESTNAME.txt
#	cpu0_0.cycle-break 1
	
#	instruction-fetch-mode instruction-fetch-trace
#	istc-disable
#	dstc-disable
#	cpu-switch-time 1
	c
}   

#@conf.con0.break_string = "START_TOKEN"
#@conf.con0.break_string = "END_TOKEN"

script-branch {
	local $con = ($console.get-component-object con)
	$con.wait-for-string "END_TOKEN"
	$con.capture-stop
	ruby0.dump-stats filename = REPLACEDBYSED534TESTNAME.ruby

	quit 0
}

#@def ctrl_ConsoleHAP(user_arg, trigger_obj, break_string):
#    if break_string == "START_TOKEN":
#        print "%s" % (break_string)
#        SIM_break_simulation("broken")
#        run_command("instruction-fetch-mode instruction-fetch-trace")
#        run_command("istc-disable")
#        run_command("dstc-disable")
#        run_command("cpu-switch-time 1")
##        run_command("cpu0_0.cycle-break 1")
#        run_command("load-module ruby")
#        #conf.ruby0.setparam.g_NUM_PROCESSORS = 1
#	#conf.ruby0.setparam.g_MEMORY_SIZE_BYTES = 4294967296
#	#conf.ruby0.init
#	run_command("c")
##	SIM_continue(0)
#    elif break_string == "END_TOKEN":
#    	print "%s" % (break_string)
#        SIM_break_simulation("broken")
#@SIM_hap_add_callback("Xterm_Break_String",
#                            ctrl_ConsoleHAP, None)
#
        
script-branch {
	local $con = ($console.get-component-object con)
	$con.wait-for-string "Exception handlers interrupted"
	$con.capture-stop
	quit 0
}




break-exception number = 52  #Mem_Address_Not_Aligned
#trace-exception -all

#break 0x4000
break (sym Init)
#break (sym fwrite)
#break (sym __errno)
#break (sym crc32file)
#break (sym halted)
c
	
	instruction-fetch-mode instruction-fetch-trace
	istc-disable
	dstc-disable
	cpu-switch-time 1
	load-module ruby
	ruby0.setparam g_NUM_PROCESSORS 1
	ruby0.setparam g_MEMORY_SIZE_BYTES 4294967296
	ruby0.init
	c
