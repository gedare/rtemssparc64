#Assembled from the "niagara-simple" machine configuration files
#distributed
# with Simics. Boots from an ISO9660 image.

if not defined num_cpus {$num_cpus  = 2}
if not defined freq_mhz {$freq_mhz  = 5}
if not defined rtc_time {$rtc_time  = "2006-04-04 12:00:00 UTC"}

###

add-directory "%simics%/targets/niagara-simple/images/"

import-std-components
import-niagara-simple-components

if $num_cpus == 1 {
   $num_cores = 1
   $num_strands = 1
} else if $num_cpus == 2 {
   $num_cores = 2
   $num_strands = 1
} else if $num_cpus == 32 {
   $num_cores = 8
   $num_strands = 4
} else {
   echo "Unsupported number of processors. (Use 1, 2, or 32)"
}
$system = (create-niagara-simple-system cpu_frequency = $freq_mhz
                                       num_cores = $num_cores
                                       strands_per_core = $num_strands
                                       rtc_time = $rtc_time)
$console = (create-std-text-console)
$system.connect com1 $console
$machine_defined = 1

instantiate-components

####

$system.set-prom-defaults
$system.set-prom-env auto-boot? true

# Simics "niagara-simple" machine does not support CD-ROM device, fortunatelly
# it is able to boot from a disk image in ISO9660 format.
$image = ($system.get-component-object disk_image)
@image = sim.objects[simenv.image]
@image.files = [['/home/eugen/work/rtemssparc64/rtems/boot/image.iso', 'ro', 0, 3256320  ]]
 
new-symtable file = /home/eugen/work/rtemssparc64/rtems/boot/debug/rtemshelloworld.exe

script-branch {
        local $con = ($console.get-component-object con)
        $con.wait-for-string "boot: "
        $con.input "RTEMSHELLOWORLD\n"
        }

#trace-exception -all

#break-exception number = 128
#break-exception number = 192

break-exception number = 52  #Mem_Address_Not_Aligned


#break 0x4000

#break (sym ofw_init)

#break (sym bootstrap)
#break (sym boot_card)

#break (sym bsp_get_work_area)

#break (sym rtems_initialize_data_structures)
#break (sym _CPU_Initialize)

#break (sym _CPU_Context_save_fp)
#break (sym _Debug_Manager_initialization)
#break (sym _API_extensions_Initialization)
#break (sym _Thread_Dispatch_initialization)
#break (sym _Workspace_Handler_initialization)
#break (sym _User_extensions_Handler_initialization)

#break (sym syscall)
#break (sym sparc_disable_interrupts)
#break (sym sparc_enable_interrupts)
#break (sym sparc64_install_isr_entries)

#break (sym _API_Mutex_Initialization)

#break (sym _Objects_Initialize_information)
#break (sym _Objects_Extend_information)
#break 0xb1ec
#break 0xb1e4

#break (sym _API_Mutex_Allocate)


#break (sym RTEMS_Malloc_Initialize)
#break -w -r (sym rtems_unified_work_area)
#break 0x8dc0
#break 0x7c84
#break 0x7ccc
#break 0x7cf0
#break 0x7d34

#break (sym Init)
#break (sym console_initialize)

#break (sym _IO_Manager_initialization)

#break (sym rtems_initialize_start_multitasking)

#break (sym _Thread_Start_multitasking)

break (sym _CPU_Context_switch)
c

