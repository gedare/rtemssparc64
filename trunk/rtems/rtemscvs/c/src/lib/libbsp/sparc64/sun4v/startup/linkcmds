
/* GAB: Eugen had put in the ld script from HelenOS */
/* RTEMS expects a lot more layout information */

/* This is from the avr linkcmds */
/*
 *  $Id: linkcmds,v 1.2 2009/05/08 13:02:08 joel Exp $
 */

/*
 * Declare some sizes.
 */
RamBase = DEFINED(RamBase) ? RamBase : 0x0;
RamSize = DEFINED(RamSize) ? RamSize : 2M;
HeapSize = DEFINED(HeapSize) ? HeapSize : 0x0;
StackSize = DEFINED(StackSize) ? StackSize : 2K;

/* Default linker script, for normal executables */
OUTPUT_FORMAT("elf64-sparc")
ENTRY(start)

MEMORY
        {
	        ram : org = 0x0, l = 2M
	}


SECTIONS
{
  /* Read-only sections, merged into text segment: */
  .hash          : { *(.hash)		}
  .dynsym        : { *(.dynsym)		}
  .dynstr        : { *(.dynstr)		}
  .gnu.version   : { *(.gnu.version)	}
  .gnu.version_d   : { *(.gnu.version_d)	}
  .gnu.version_r   : { *(.gnu.version_r)	}
  .rel.init      : { *(.rel.init)		}
  .rela.init     : { *(.rela.init)	}
  .rel.text      :
    {
      *(.rel.text)
      *(.rel.text.*)
      *(.rel.gnu.linkonce.t*)
    }
  .rela.text     :
    {
      *(.rela.text)
      *(.rela.text.*)
      *(.rela.gnu.linkonce.t*)
    }
  .rel.fini      : { *(.rel.fini)		}
  .rela.fini     : { *(.rela.fini)	}
  .rel.rodata    :
    {
      *(.rel.rodata)
      *(.rel.rodata.*)
      *(.rel.gnu.linkonce.r*)
    }
  .rela.rodata   :
    {
      *(.rela.rodata)
      *(.rela.rodata.*)
      *(.rela.gnu.linkonce.r*)
    }
  .rel.data      :
    {
      *(.rel.data)
      *(.rel.data.*)
      *(.rel.gnu.linkonce.d*)
    }
  .rela.data     :
    {
      *(.rela.data)
      *(.rela.data.*)
      *(.rela.gnu.linkonce.d*)
    }
  .rel.ctors     : { *(.rel.ctors)	}
  .rela.ctors    : { *(.rela.ctors)	}
  .rel.dtors     : { *(.rel.dtors)	}
  .rela.dtors    : { *(.rela.dtors)	}
  .rel.got       : { *(.rel.got)		}
  .rela.got      : { *(.rela.got)		}
  .rel.bss       : { *(.rel.bss)		}
  .rela.bss      : { *(.rela.bss)		}
  .rel.plt       : { *(.rel.plt)		}
  .rela.plt      : { *(.rela.plt)		}
  /* Internal text space or external memory */
  .boot 0x4000: AT (0x4000) {
	*(BOOTSTRAP);
   }
  .text 0x4000 :
  {
    *(.text*)

    /*
     * Special FreeBSD sysctl sections.
     */
    . = ALIGN (16);
    __start_set_sysctl_set = .;
    *(set_sysctl_*);
    __stop_set_sysctl_set = ABSOLUTE(.);
    *(set_domain_*);
    *(set_pseudo_*);

    *(.eh_frame)
    . = ALIGN (16);

    *(.gnu.linkonce.t*)
     __ctors_start = . ;
     *(.ctors)
     __ctors_end = . ;
     __dtors_start = . ;
     *(.dtors)
     __dtors_end = . ;
    KEEP(SORT(*)(.ctors))
    KEEP(SORT(*)(.dtors))

    _rodata_start = . ;
    *(.rodata*)
    *(.gnu.linkonce.r*)
    _erodata = ALIGN( 0x10 ) ;



    etext = ALIGN(2);
    _etext = . ;

    /* GAB */
    *(.init)
    *(.fini)
    *(.jcr)

     . = ALIGN (16);
    _endtext = . ;
  } > ram 
  
  .data	  : AT (ADDR (.text) + SIZEOF (.text))
  {
     PROVIDE (__data_start = .) ;
    data_start = . ;
    _data_start = . ;
    *(.data)
    *(.data*)
    *(.rodata)  /* We need to include .rodata here if gcc is used */
    *(.rodata*) /* with -fdata-sections.  */
    *(.gnu.linkonce.d*)
    . = ALIGN(2);
    edata = . ;
    _edata = . ;
     PROVIDE (__data_end = .) ;
  } > ram
 
  /* XXX
   __data_load_start = LOADADDR(.data);
   __data_load_end = __data_load_start + SIZEOF(.data);
  */
 
  .bss  SIZEOF(.data) + ADDR(.data) :
  {
    . = ALIGN(16);
    __bss_start = ALIGN(0x8);
    bss_start = .;
    bss_start = .;
    *(.bss .bss* .gnu.linkonce.b*)
    *(COMMON)
    . = ALIGN (16);
    end = .;
    _end = .;
    __end = .;
  
    . = ALIGN (16); /* GAB: made arbitrary alignment */
    . += StackSize;
    PROVIDE (__stack = .);
    PROVIDE (WorkAreaBase = .);
  }  > ram
  
  
}


